import zipfile

zip_file = "plagiarism_data.zip"

with zipfile.ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall("plagiarism_data")

folder = "plagiarism_data"
import os
import string
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
def load_documents(folder_path):
    documents = {}
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith(".txt"):
                full_path = os.path.join(root, file)
                with open(full_path, 'r', encoding='utf-8') as f:
                    documents[file] = f.read()
    return documents
def preprocess(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    return textdef compute_tfidf(docs):
    tfidf = TfidfVectorizer()
    vectors = tfidf.fit_transform(docs)
    return vectors

def compute_similarity_matrix(vectors, filenames):
    similarity = cosine_similarity(vectors)
    results = []
    for i in range(len(filenames)):
        for j in range(i + 1, len(filenames)):
            results.append({
                "Doc1": filenames[i],
                "Doc2": filenames[j],
                "Similarity": similarity[i][j]
            })
    return pd.DataFrame(results)docs = load_documents(folder)
filenames = list(docs.keys())
texts = [preprocess(docs[f]) for f in filenames]
vectors = compute_tfidf(texts)
results_df = compute_similarity_matrix(vectors, filenames)

threshold = 0.75
results_df['Plagiarized'] = results_df['Similarity'] > threshold

results_df.sort_values(by="Similarity", ascending=False)
